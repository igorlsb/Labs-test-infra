version: '3.8'

services:
  nginx:
    build:
      context: ./nginx
    container_name: nginx-load-balancer
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
      - grafana
      - prometheus
      - loki
    networks:
      - app_network

frontend:
  build:
    context: ./frontend
  image: igorlsb/frontend-app:latest  
  restart: always
  networks:
    - app_network

  backend:
    build:
      context: ./backend
    deploy:
      replicas: 3  # ðŸ”¹ Executa 3 instÃ¢ncias do backend para escalabilidade
      restart_policy:
        condition: always
    networks:
      - app_network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus  # ðŸ”¹ Volume para persistÃªncia dos dados
    ports:
      - "9090:9090"
    networks:
      - app_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana  # ðŸ”¹ Volume para persistÃªncia dos dashboards
    depends_on:
      - prometheus
    networks:
      - app_network

  loki:
    image: grafana/loki:latest
    container_name: loki
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/loki-config.yml
      - loki_data:/loki  # ðŸ”¹ Volume para persistÃªncia dos logs
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  loki_data:
